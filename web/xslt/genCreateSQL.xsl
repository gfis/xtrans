<?xml version="1.0" encoding="UTF-8"?>
<!--
    Transforms a record structure definition into
    SQL DROP/CREATE statements
    @(#) $Id: genCreateSQL.xsl 9 2008-09-05 05:21:15Z gfis $
    2006-10-20, Dr. Georg Fischer äöüÄÖÜß
-->
<!--
 * Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:func="http://exslt.org/functions"
    extension-element-prefixes="func date">

    <xsl:param name="package" /><!-- default: xtrans -->
    <xsl:output method="text"/> <!-- i.e. SQL source code -->
    <xsl:strip-space elements="*"/> <!-- remove whitespace in all nodes -->

    <!-- 64 spaces for formatting; select="  " would compress the spaces to an empty attribute -->
    <xsl:variable name="spaces"><xsl:text>                                                                </xsl:text></xsl:variable>

<!-- Transformation for the root element -->

    <xsl:template match="record">

        <!-- File header comment -->
        <xsl:value-of select="concat('--&#9;', @name, '_create.sql - ', @rem, '&#10;')" />
        <xsl:value-of select="concat('--&#9;@(#) $', 'Id$&#10;')" /> <!-- CVS inserts timestamp here -->
        <xsl:value-of select="concat('--&#9;Automatically generated by genCreateSQL.xsl at ', date:date-time(), '&#10;')" />
        <xsl:value-of select="concat('--&#9;DO NOT EDIT HERE!', '&#10;--&#10;')" />

        <!-- DROP and start of CREATE -->
        <xsl:value-of select="concat('DROP   TABLE ', @name, ' if exists;&#10;')" />
        <xsl:value-of select="concat('CREATE TABLE ', @name, '&#10;')" />
        <xsl:for-each select="./field">
            <xsl:call-template name="fieldSQL">
                <xsl:with-param name="index" />
                <xsl:with-param name="sqlType">
                    <xsl:choose>
                        <xsl:when test="(@type='byte' and ../@type='Char') or @type='num' or @type='binary'">
                            <xsl:text>INT</xsl:text>
                        </xsl:when>
                        <xsl:when test="@type='date'">
                            <xsl:text>DATE</xsl:text>
                        </xsl:when>
                        <xsl:when test="@type='timestamp'">
                            <xsl:text>TIMESTAMP</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="concat('VARCHAR(', @len, ')')" />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:with-param>
            </xsl:call-template>
        </xsl:for-each>

        <xsl:if test="count(..//@key) > 0">
            <xsl:value-of select="'&#9;, PRIMARY KEY'" />
            <xsl:for-each select="./field">
                <xsl:if test="string-length(./@key) > 0">
                    <xsl:choose>
                        <xsl:when test="./@key = '1'">
                            <xsl:value-of select="' ('" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="', '" />
                        </xsl:otherwise>
                    </xsl:choose>
                        <xsl:value-of select="./@name" />
                </xsl:if>
            </xsl:for-each>
            <xsl:value-of select="')&#10;'" />
        </xsl:if>

        <xsl:value-of select="'&#9;);&#10;COMMIT;&#10;'" />
    </xsl:template><!-- record -->

<!-- Auxilliary templates -->

    <xsl:template name="uc"> <!-- return name with all letters uppercased -->
        <xsl:param name="name"/>
        <xsl:value-of select="translate($name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')" />
    </xsl:template>

    <xsl:template name="uc1"> <!-- return name with 1st letter uppercased -->
        <xsl:param name="name"/>
        <xsl:value-of select="concat(translate(substring($name,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring($name,2))" />
    </xsl:template>

    <xsl:template name="fieldSQL">
        <xsl:param name="index" />
        <xsl:param name="sqlType" />
        <xsl:choose>
            <xsl:when test="position() &lt;= 1">
                <xsl:value-of select="'&#9;( '" />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="'&#9;, '" />
            </xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="@name" />
        <xsl:choose>
            <xsl:when test="string-length(@name) &lt;       16" >
                <xsl:value-of select="substring($spaces, 1, 16 - string-length(@name   ))" />
            </xsl:when>
        </xsl:choose>
        <xsl:value-of select="$sqlType" />
        <xsl:choose>
            <xsl:when test="string-length($sqlType) &lt;    16" >
                <xsl:value-of select="substring($spaces, 1, 16 - string-length($sqlType))" />
            </xsl:when>
        </xsl:choose>
        <xsl:value-of select="concat(' -- ', @rem, '&#10;')" />
    </xsl:template><!-- fieldSQL -->

</xsl:stylesheet>
