/*  Properties of a single production of the grammar.
    @(#) $Id: Production.java 524 2010-07-28 18:23:40Z gfis $
    2010-06-04: copied from Token.java
*/
/*
 * Copyright 2010 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.teherba.xtrans.parse;
import  java.sql.ResultSet;
import  java.text.SimpleDateFormat;
import  java.util.Date;

/** Bean which stores all properties of a single production.
 *  @author Dr. Georg Fischer
 */
public class Production {
    public final static String CVSID = "@(#) $Id: Production.java 524 2010-07-28 18:23:40Z gfis $";

    /** Index, sequential number of this production */
    private int seqNo;
    /** Name of the nonterminal on the right side of the production */
    private String leftSide;
    /** Action to be performed by the parser: s=push=shift, r=pop=reduce, i=ignore, a=accept */
    private char action;
    /** Number of elements on the right side of the production */
    private int rightLength;
    /** Index of first transformation in the rule for this production, or 0 if none */
    private int firstTrans;

    /** No-args Constructor
     */
    public Production() {
    } // Constructor()

    /** Gets DROP/CREATE statements for the corresponding database table.
     *  @return data definition SQL statements
     */
    public String getDDL() {
        return    "-- @(#) $Id: Production.java 524 2010-07-28 18:23:40Z gfis $\n"
                + "-- generated by " + Production.class.getName() + " on "
                        + (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")).format(new java.util.Date()) + "\n"
                + "DROP   TABLE productions;\n"
                + "CREATE TABLE productions\n"
                + "\t\t( grammar\tVARCHAR(16) NOT NULL\n"
                + "\t\t, seqNo\tINT NOT NULL\n"
                + "\t\t, leftSide\tVARCHAR(64)\n"
                + "\t\t, action\tCHAR(1)\n"
                + "\t\t, rightLength\tINT\n"
                + "\t\t, firstTrans\tINT\n"
                + "\t\t, PRIMARY KEY(grammar, seqNo)\n"
                + "\t\t);\n"
                + "COMMIT;\n";
    } // getDDL

    /** Gets a SELECT statement for all properties (quasi-static).
     *  @return something like "SELECT * from productions where grammar = ?"
     */
    public String getSelectStatement() {
        return "SELECT seqNo, leftSide, action, rightLength, firstTrans"
                + " FROM productions"
                + " WHERE grammar = ?"
                + " ORDER BY seqNo";
    } // getSelectStatement

    /** Stores one entry fetched from the database table
     *  @param resultSet result set containing the next row fetched from the database table
     */
    public void fill(ResultSet resultSet) {
        try {
            int icol = 0;
            seqNo      = resultSet.getInt   (++ icol);
            leftSide    = resultSet.getString(++ icol);
            action      = resultSet.getString(++ icol).charAt(0);
            rightLength = resultSet.getInt   (++ icol);
        } catch (Exception exc) { // should never happen
            System.err.println(exc.getMessage());
        }
    } // fill

    /** Gets the key for this item
     *  @return concatenation of key components
     */
    public int key() {
        return seqNo;
    } // key

   /** Gets the sequential number of the production
     *  @return index: 1, 2 ...
     */
    public int  getSeqNo() {
        return seqNo;
    } // getSeqNo

    /** Sets the sequential number of the production
     *  @param seqNo index: 1, 2 ...
     */
    public void setSeqNo(int seqNo) {
        this.seqNo = seqNo;
    } // setSeqNo

    /** Gets left side (nonterminal) of the production.
     *  @return nonterminal's name
     */
    public String getLeftSide() {
        return leftSide;
    } // getLeftSide

    /** Sets left side (nonterminal) of the production.
     *  @param leftSide nonterminal's name.
     */
    public void   setLeftSide(String leftSide) {
        this.leftSide = leftSide;
    } // setLeftSide

    /** Gets the parser's action
     *  @return action to be performed by the parser
     */
    public char getAction() {
        return action;
    } // getAction

    /** Sets the parser's action
     *  @param action action to be performed by the parser
     */
    public void setAction(char action) {
        this.action = action;
    } // setAction

    /** Gets the length of the right side
     *  @return length of the right side: 0, 1, 2 ...
     */
    public int  getRightLength() {
        return rightLength;
    } // getRightLength

    /** Sets the length of the right side
     *  @param rightLength length of the right side: 0, 1, 2 ...
     */
    public void setRightLength(int rightLength) {
        this.rightLength = rightLength;
    } // setRightLength

    /** Gets the index of first transformation in the rule for this production, or 0 if none
     *  @return 0 or index in transformations
     */
    public int  getFirstTrans() {
        return firstTrans;
    } // getFirstTrans

    /** Sets the index of first transformation in the rule for this production, or 0 if none
     *  @param firstTrans 0 or index in transformations
     */
    public void setFirstTrans(int firstTrans) {
        this.firstTrans = firstTrans;
    } // getFirstTrans

} // Production
