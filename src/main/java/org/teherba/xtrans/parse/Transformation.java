/*  Properties of a single transformation operation for a production of the grammar.
    @(#) $Id: Transformation.java 524 2010-07-28 18:23:40Z gfis $
    2016-10-11: typo SetInfo
    2010-07-21: copied from Production.java
*/
/*
 * Copyright 2010 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.teherba.xtrans.parse;
import  java.sql.ResultSet;
import  java.text.SimpleDateFormat;
import  java.util.Date;


/** Bean which stores all properties of a single transformation operation.
 *  All actions are stored in a linear array, and the grammar's productions
 *	refer to sublists in that array by the index of the first applicable operation. 
 *  There is a special operation code which
 *	indicates the end of the sublist for the individual production. 
 *  @author Dr. Georg Fischer
 */
public class Transformation {
    public final static String CVSID = "@(#) $Id: Transformation.java 524 2010-07-28 18:23:40Z gfis $";

    /** Index, sequential number of this transaction */
    private int seqNo;
    /** Code for the transformation operation to be performed */
    private int operation;
    /** Additional information for the operation: nonterminal symbol, relative stack index etc. */
    private String info;

	// operation codes
	/** End of transformation rule (void) */
	public static final int EOTR = 0;
	/** Copy 1 element (relative stack distance, 0 = top, 1, 2, ...) */
	public static final int COP1 = 1;
	/** Insert the start tag of a nonterminal (name) */
	public static final int INIT = 2;
	/** Insert the end   tag of a nonterminal (name) */
	public static final int TERM = 3;
	/** Enclose the right side by a nonterminal (name) */
	public static final int ENCL = 4;

    /** No-args Constructor
     */
    public Transformation() {
    } // Constructor()

    /** Gets DROP/CREATE statements for the corresponding database table.
     *  @return data definition SQL statements
     */
    public String getDDL() {
        return    "-- @(#) $Id: Transformation.java 524 2010-07-28 18:23:40Z gfis $\n"
        		+ "-- generated by " + Transformation.class.getName() + " on " 
        				+ (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")).format(new java.util.Date()) + "\n"
                + "DROP   TABLE transformations;\n"
        		+ "CREATE TABLE transformations\n"
        		+ "\t\t( grammar\tVARCHAR(16) NOT NULL\n"
        		+ "\t\t, seqNo\tINT NOT NULL\n"
        		+ "\t\t, operation\tINT\n"
        		+ "\t\t, info\tVARCHAR(128)\n"
				+ "\t\t, PRIMARY KEY(grammar, seqNo)\n"
				+ "\t\t);\n"        		
				+ "COMMIT;\n";
    } // getDDL

    /** Gets a SELECT statement for all properties (quasi-static).
     *  @return something like "SELECT * from productions where grammar = ?"
     */
    public String getSelectStatement() {
        return "SELECT seqNo, operation, info"
        		+ " FROM transformations"
        		+ " WHERE grammar = ?"
        		+ " ORDER BY seqNo";
    } // getSelectStatement

    /** Stores one entry fetched from the database table
     *  @param resultSet result set containing the next row fetched from the database table
     */
    public void fill(ResultSet resultSet) {
        try {
			int icol = 0;
           	seqNo     = resultSet.getInt   (++ icol);
            operation      = resultSet.getInt   (++ icol);
            info        = resultSet.getString(++ icol);
        } catch (Exception exc) { // should never happen
            System.err.println(exc.getMessage());
        } 
    } // fill
    
    /** Gets the key for this item
     *  @return concatenation of key components
     */
    public int key() {
        return seqNo;
    } // key
    
   /** Gets the sequential number of the production
     *  @return index: 1, 2 ...
     */
    public int  getSeqNo() {
        return seqNo;
    } // getSeqNo

    /** Sets the sequential number of the production
     *  @param seqNo index: 1, 2 ...
     */		
    public void setSeqNo(int seqNo) {
        this.seqNo = seqNo;
    } // setSeqNo

    /** Gets the operation code.
     *  @return one of the transformation operation codes.
     */
    public int getOperation() {
        return operation;
    } // getOperation

    /** Sets the operation code.
     *  @param operation one of the transformation operation codes.
     */
    public void setOperation(int operation) {
        this.operation = operation;
    } // setOperation

    /** Gets the additional information for the operation
     *  @return nonterminal symbol, relative stack number etc.
     */
    public String getInfo() {
        return info;
    } // getInfo

    /** Sets the additional information for the operation
     *  @param info nonterminal symbol, relative stack number etc.
     */
    public void setInfo(String info) {
        this.info = info;
    } // setInfo

} // Transformation
