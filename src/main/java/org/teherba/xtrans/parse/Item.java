/*  Properties of a single parse table element (item in a production)
    @(#) $Id: Item.java 524 2010-07-28 18:23:40Z gfis $
    2016-10-11: java.util.Date
    2010-06-04: copied from churchcal/Day.java
*/
/*
 * Copyright 2010 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.teherba.xtrans.parse;
import  java.sql.ResultSet;
import  java.text.SimpleDateFormat;
import  java.util.Date;

/** Bean which stores all properties of a single parse table element
 *  @author Dr. Georg Fischer
 */
public class Item {
    public final static String CVSID = "@(#) $Id: Item.java 524 2010-07-28 18:23:40Z gfis $";

    /** State of the Push-Down Automaton */
    private int state;
    /** Type of the token: kw, id, num, op, se, ee etc. */
    private String tag;
    /** Value of the token: specific operator string, identifier characters, number digits, keyword characters */
    private String val;

    /** Action to be performed by the parser: s=push=shift, r=pop=reduce, i=ignore, a=accept */
    private char action;
    // action codes
    /** Shift - push */
    public static final char SHIFT  = 's';
    /** Reduce - pop */
    public static final char REDUCE = 'r';
    /** Accept - finish */
    public static final char ACCEPT = 'a';
    /** Ignore          */
    public static final char IGNORE = 'i';

    /** Next state for shift, production number for reduce action */
    private int nextInfo;

    /** No-args Constructor - properties of the current day
     */
    public Item() {
    } // Constructor()

    /** Gets DROP/CREATE statements for the corresponding database table.
     *  @return data definition SQL statements
     */
    public String getDDL() {
        return    "-- @(#) $Id: Item.java 524 2010-07-28 18:23:40Z gfis $\n"
                + "-- generated by " + Item.class.getName() + " on "
                        + (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")).format(new java.util.Date()) + "\n"
                + "DROP   TABLE items;\n"
                + "CREATE TABLE items\n"
                + "\t\t( grammar\tVARCHAR(16) NOT NULL\n"
                + "\t\t, state\tINT NOT NULL\n"
                + "\t\t, tag\tVARCHAR( 8) NOT NULL\n"
                + "\t\t, val\tVARCHAR(64) NOT NULL\n"
                + "\t\t, action\tCHAR(1) NOT NULL\n"
                + "\t\t, nextInfo\tINT\n"
                + "\t\t, PRIMARY KEY(grammar, state, tag, val)\n"
                + "\t\t);\n"
                + "COMMIT;\n";
    } // getDDL

    /** Gets a SELECT statement for all properties (quasi-static).
     *  @return something like "SELECT * from items where grammar = ?"
     */
    public String getSelectStatement() {
        return "SELECT state, tag, val, action, nextInfo"
                + " FROM items"
                + " WHERE grammar = ?"
                + " ORDER BY state, tag, val";
    } // getSelectStatement

    /** Stores one entry fetched from the database table
     *  @param resultSet result set containing the next row fetched from the database table
     */
    public void fill(ResultSet resultSet) {
        try {
            int icol    = 0;
            state       = resultSet.getInt   (++ icol);
            tag         = resultSet.getString(++ icol);
            val         = resultSet.getString(++ icol);
            action      = resultSet.getString(++ icol).charAt(0);
            nextInfo    = resultSet.getInt   (++ icol);
        } catch (Exception exc) { // should never happen
            System.err.println(exc.getMessage());
        }
    } // fill

    /** Separator for key components */
    public static final String SEP = ";";

    /** Gets the key for this item
     *  @return concatenation of key components
     */
    public String key() {
        return String.valueOf(state) + SEP + tag + SEP + val;
    } // key

    /** Gets the state
     *  @return input state
     */
    public int  getState() {
        return state;
    } // getState

    /** Sets the state
     *  @param state input state
     */
    public void setState(int state) {
        this.state = state;
    } // setState

    /** Gets type of the element.
     *  @return kw, id, num, op etc.
     */
    public String getTag() {
        return tag;
    } // getTag

    /** Sets type of the element.
     *  @param tag type of the element: kw, id, num, op etc.
     */
    public void   setTag(String tag) {
        this.tag = tag;
    } // setTag

    /** Gets value of the element.
     *  @return specific operator string, identifier characters, number digits, keyword characters
     */
    public String getVal() {
        return val;
    } // getVal

    /** Sets value of the element.
     *  @param val specific operator string, identifier characters, number digits, keyword characters
     */
    public void   setVal(String val) {
        this.val = val;
    } // setVal

    /** Gets the parser's action
     *  @return action to be performed by the parser: s=push=shift, r=pop=reduce, i=ignore, a=accept
     */
    public char getAction() {
        return action;
    } // getAction

    /** Sets the parser's action
     *  @param action action to be performed by the parser: s=push=shift, r=pop=reduce, i=ignore, a=accept
     */
    public void setAction(char action) {
        this.action = action;
    } // setAction

    /** Gets the information for the action
     *  @return next state for shift, production number for reduce action
     */
    public int  getNextInfo() {
        return nextInfo;
    } // getNextInfo

    /** Sets the information for the action
     *  @param nextInfo next state for shift, production number for reduce action
     */
    public void setNextInfo(int nextInfo) {
        this.nextInfo = nextInfo;
    } // setNextInfo

} // Item
