/*  GPSBeanBase.java - 
 *  @(#) $Id: GPSBeanBase.java 801 2011-09-12 06:16:01Z gfis $
 *  Automatically generated by xtrans/web/xslt/genRecord.xsl at 2011-09-12T07:44:02+02:00
 *  DO NOT EDIT HERE - rather inherit from this class!
 */
package org.teherba.xtrans.geo;
import  java.text.SimpleDateFormat;
import  java.sql.Date;
import  java.sql.Timestamp;
import  org.xml.sax.Attributes;
import  org.xml.sax.helpers.AttributesImpl;
import  org.xml.sax.SAXException;

/** .
 */
public class GPSBeanBase {
    /** Readable format for dates */
    protected static final SimpleDateFormat ISO_DATE_FORMAT      = new SimpleDateFormat("yyyy-MM-dd");
    /** Readable format for timestamps with milliseconds */
    protected static final SimpleDateFormat ISO_TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

    /** Replaces offending characters in attributes by entities,
     *  and trim right trailing whitespace
     *  @param value value of the attribute
     *  @return string with offending characters replaced by entities
     */
    protected String replaceAttrText(String value) {
        return ("x" + value
    			.replaceAll("&" , "&amp;")
                .replaceAll("\'", "&apos;")
                .replaceAll("\"", "&quot;")
               ).trim().substring(1);
    } // replaceAttrText

    /** Source code version */
    public static final String CVSID = "@(#) $Id: GPSBeanBase.java 801 2011-09-12 06:16:01Z gfis $";


    /** No-args Constructor for .
     */
    public GPSBeanBase() {
        super();
    } // Constructor

    /** longitude - eastern meridian, in degrees from Greenwich */
    protected double longitude;

    /** Sets longitude - eastern meridian, in degrees from Greenwich
     *  @param longitude eastern meridian, in degrees from Greenwich
     */
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    } // setLongitude

    /** Gets longitude - eastern meridian, in degrees from Greenwich
     *  @return eastern meridian, in degrees from Greenwich
     */
    public double getLongitude() {
        return longitude;
    } // getLongitude
    //----------------
    /** lattitude - northern circle , in degrees from equator */
    protected double lattitude;

    /** Sets lattitude - northern circle , in degrees from equator
     *  @param lattitude northern circle , in degrees from equator
     */
    public void setLattitude(double lattitude) {
        this.lattitude = lattitude;
    } // setLattitude

    /** Gets lattitude - northern circle , in degrees from equator
     *  @return northern circle , in degrees from equator
     */
    public double getLattitude() {
        return lattitude;
    } // getLattitude
    //----------------
    /** dateTime - ISO date and time of measurement */
    protected java.sql.Timestamp dateTime;

    /** Sets dateTime - ISO date and time of measurement
     *  @param dateTime ISO date and time of measurement
     */
    public void setDateTime(java.sql.Timestamp dateTime) {
        this.dateTime = dateTime;
    } // setDateTime

    /** Gets dateTime - ISO date and time of measurement
     *  @return ISO date and time of measurement
     */
    public java.sql.Timestamp getDateTime() {
        return dateTime;
    } // getDateTime
    //----------------
    /** altitude - in m */
    protected float altitude;

    /** Sets altitude - in m
     *  @param altitude in m
     */
    public void setAltitude(float altitude) {
        this.altitude = altitude;
    } // setAltitude

    /** Gets altitude - in m
     *  @return in m
     */
    public float getAltitude() {
        return altitude;
    } // getAltitude
    //----------------
    /** speed - relative to previous point, in km/h */
    protected float speed;

    /** Sets speed - relative to previous point, in km/h
     *  @param speed relative to previous point, in km/h
     */
    public void setSpeed(float speed) {
        this.speed = speed;
    } // setSpeed

    /** Gets speed - relative to previous point, in km/h
     *  @return relative to previous point, in km/h
     */
    public float getSpeed() {
        return speed;
    } // getSpeed
    //----------------
    /** course - clockwise degrees: 0=N, 90=E, 180=S */
    protected String course;

    /** Sets course - clockwise degrees: 0=N, 90=E, 180=S
     *  @param course clockwise degrees: 0=N, 90=E, 180=S
     */
    public void setCourse(String course) {
        this.course = course;
    } // setCourse

    /** Gets course - clockwise degrees: 0=N, 90=E, 180=S
     *  @return clockwise degrees: 0=N, 90=E, 180=S
     */
    public String getCourse() {
        return course;
    } // getCourse
    //----------------

    /** Gets an XML tag for the record
     *  @param namespace namespace for the generated XML tag with colon, or empty
     *  @return an XML element for a GPS record
     */
    public String getXMLTag(String namespace) {
        return namespace + "GPS";
    } // getXMLTag

    /** Assembles all attributes in an object
     *  @return attributes for an XML element representing the bean
     */
    public Attributes getAttributes() {
        String localName = "";
        AttributesImpl attrs = null;
        attrs = new AttributesImpl();
                attrs.addAttribute("", "longitude", "longitude", "CDATA", String.valueOf(getLongitude()));
                attrs.addAttribute("", "lattitude", "lattitude", "CDATA", String.valueOf(getLattitude()));
                attrs.addAttribute("", "dateTime", "dateTime", "CDATA", ISO_DATE_FORMAT.format(getDateTime()));
                attrs.addAttribute("", "altitude", "altitude", "CDATA", String.valueOf(getAltitude()));
                attrs.addAttribute("", "speed", "speed"      , "CDATA", String.valueOf(getSpeed()));
                attrs.addAttribute("", "course", "course"    , "CDATA", replaceAttrText(getCourse()));
        return attrs;

    } // getAttributes

    /** Receive notification of the start of an element.
     *  Looks for the element which contains encoded strings.
     *  @param uri The Namespace URI, or the empty string if the element has no Namespace URI
     *  or if Namespace processing is not being performed.
     *  @param localName the local name (without prefix),
     *  or the empty string if Namespace processing is not being performed.
     *  @param qName the qualified name (with prefix),
     *  or the empty string if qualified names are not available.
     *  @param attrs the attributes attached to the element.
     *  If there are no attributes, it shall be an empty Attributes object.
     *  @throws SAX Exception
     */
    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {
        try {
            if (false) {
            } else if (qName.equals("GPS")) {
                setLongitude       (Double.parseDouble(attrs.getValue("longitude")));
                setLattitude       (Double.parseDouble(attrs.getValue("lattitude")));
                setDateTime        (new java.sql.Timestamp(ISO_TIMESTAMP_FORMAT.parse(attrs.getValue("dateTime")).getTime()));
                setAltitude        (Float.parseFloat(attrs.getValue("altitude")));
                setSpeed           (Float.parseFloat(attrs.getValue("speed")));
                setCourse          (attrs.getValue("course"));
            } else {
                // silently ignore other elements
            }
        } catch (Exception exc) {
            throw new SAXException("invalid attribute value ", exc);
        }
    } // startElement
    
} // class GPSBeanBase
